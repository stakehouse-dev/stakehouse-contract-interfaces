pragma solidity ^0.8.10;

import { IDataStructures } from './IDataStructures.sol';

// SPDX-License-Identifier: BUSL-1.1

interface IShanghaiSweepReporting {
    /// @dev Mapping view methods
    function isSweepReported(uint256 _withdrawalIndex) external view returns (bool);
    function totalETHSentToBlsPublicKey(bytes calldata _blsPubKey) external view returns (uint256);
    function totalSweepsReportedAgainstUnknownTopUpsForBlsPublicKey(bytes calldata _blsPubKey) external view returns (uint256);
    function totalReportedETHNotWithdrawn(bytes calldata _blsPubKey) external view returns (uint256);
    function validatorIndexToBLSKey(uint256 _validatorIndex) external view returns (bytes memory);

    // @notice For a given Shanghai report, how much of it is mintable dETH
    function previewTotalMintableDETH(IDataStructures.ShanghaiReport calldata _report) external view returns (uint256);

    /// @notice Given a list of sweeps, how much has been unreported
    function getSumOfUnreportedSweeps(IDataStructures.Sweep[] calldata _sweeps) external view returns (uint256 sum);

    /// @notice Based on the total amount of ETH sent to the BLS public key via the Ethereum deposit contract, how much is unknown top ups
    function totalReportedUnknownTopUpsForBlsPublicKey(bytes calldata _blsPublicKey) external view returns (uint256);

    /// @notice Given a list of withdrawal indexes, this will filter the list and only return the list of withdrawal indexes that have not been reported
    function getListOfUnreportedWithdrawalIndexes(uint256[] calldata _withdrawalIndexes) external view returns (
        uint256[] memory unreportedIndexes
    );

    /// @notice In a single transaction, report sweeps and then immediately burn the new dETH for ETH
    /// @param _optimisticWithdrawal If true, when the amount of dETH reported is not enough to withdraw ETH execution wont revert
    /// @param _report The Shanghai report structure that decorates the base `_validatorState` information with Shanghai sweeps
    /// @param _signature Over the Shanghai report
    /// @param _validatorState Beacon chain balance report containing validator state
    function reportAndWithdrawETH(
        bool _optimisticWithdrawal,
        IDataStructures.ShanghaiReport calldata _report,
        IDataStructures.EIP712Signature calldata _signature,
        IDataStructures.ETH2DataReport calldata _validatorState
    ) external;

    /// @notice Inform Stakehouse protocol about sweeps that have taken place for multiple BLS public keys to avoid multiple transactions
    /// @param _reports List of Shanghai skim reports for each BLS public key
    /// @param _signatures List of designated verifier signatures
    /// @param _validatorStates List of validator states that gives context to the sweep reports
    function reportSweepsForMultipleBLSPublicKeys(
        IDataStructures.ShanghaiReport[] calldata _reports,
        IDataStructures.EIP712Signature[] calldata _signatures,
        IDataStructures.ETH2DataReport[] calldata _validatorStates
    ) external;

    /// @notice Allow anyone to report Shanghai sweeps that have been generated by the consensus layer
    /// @param _report The Shanghai report structure that decorates the base `_validatorState` information with Shanghai sweeps
    /// @param _signature Over the sweep report
    /// @param _validatorState Beacon chain balance report containing validator state
    function reportSweeps(
        IDataStructures.ShanghaiReport calldata _report,
        IDataStructures.EIP712Signature calldata _signature,
        IDataStructures.ETH2DataReport calldata _validatorState
    ) public returns (uint256);

    /// @notice If required, report multiple batches of sweeps post rage quit
    function batchReportSweepsPostRageQuit(
        IDataStructures.ShanghaiReport[] calldata _reports,
        IDataStructures.EIP712Signature[] calldata _signatures,
        IDataStructures.ETH2DataReport[] calldata _validatorStates
    ) external;

    /// @notice Unwrap dETH for ETH from multiple bls public keys. dETH can be liquid or isolated part of the user personal index
    function batchUnwrapDETH(bytes[] calldata _blsPublicKeys, uint256[] calldata _unwrapAmounts) external;

    /// @notice Unwrap dETH for ETH. dETH can be liquid or isolated part of the user personal index
    /// @param _blsPublicKey of the validator that received a sweep
    /// @param _unwrapAmount WEI amount of dETH being burned 1:1 for ETH from the Stakehouse protocol
    function unwrapDETH(bytes calldata _blsPublicKey, uint256 _unwrapAmount) external;
}